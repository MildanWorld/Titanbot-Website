@using System
@using System.Linq
@model Titanbot.Web.ViewModels.AllCommands

@{
    ViewData["Title"] = "Examples";
}

<div>
    <h1>Examples!</h1>
    <div class="row">
        <div class="col-12 col-md-4 col-lg-3">
            <nav id="navbar-list" class="navbar navbar-light bg-light scrollBox overviewBox">
                <a class="navbar-brand" href="#">Overview</a>
                <nav class="nav nav-pills flex-column">
                    <a class="nav-link" href="#introduction">Introduction</a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link ml-3 my-1" href="#adding-the-bot">Adding the bot</a>
                        <a class="nav-link ml-3 my-1" href="#configuring-the-bot">Configuring the bot</a>
                        <a class="nav-link ml-3 my-1" href="#settings">Settings</a>
                        <a class="nav-link ml-3 my-1" href="#message-handling">Message handling</a>
                    </nav>
                    <a class="nav-link" href="#commands">Commands</a>
                    <nav class="nav nav-pills flex-column">
                        @foreach (var group in Model.PriorityGroups)
                        {
                            <a class="nav-link ml-3 my-1" href="#@group.ToString()">@group.ToString() commands</a>
                            <nav class="nav nav-pills flex-column">
                                @foreach (var command in Model.Commands.Where(v => v.Group == group).OrderBy(v => v.Name))
                                {
                                    <a class="nav-link ml-5 my-1" href="#@command.Name">@command.Name</a>
                                }
                            </nav>
                        }
                    </nav>
                </nav>
            </nav>
        </div>
        
        <div class="col-12 col-md-8 col-lg-9">
            <div data-spy="scroll" data-target="#navbar-list" class="scrollBox px-4">
                <h4 id="introduction">Introduction</h4>
                <p>
                    This page will help you in inviting the bot to your guild, configuring it so it fits your needs and a little bit of info
                    about how Titanbot handles a message you send to it. Finally there will be a list of all the commands that Titanbot supports.
                    Do keep in mind that you may not have access to all of the commands since some of them require administrator rights.
                </p>
                <h5 id="adding-the-bot">Adding the bot</h5>
                <p>
                    To add Titanbot to your guild, you will have to be an administrator of said guild.
                    All you have to do is click the 'invite' button at the top of the page, log in if necessary and choose the guild you want to add it on.
                    That is really all there is to adding the bot to your guild! Nice and simple, right?
                </p>
                <h5 id="configuring-the-bot">Configuring the bot</h5>
                <p>
                    Titanbot comes with a bunch of commands at your disposal, the most popular of which is the <code>TitanLord</code> command.
                    For example the titanlord command is by default only accessible to administrators of the guild, since by default 
                    it will ping <code>@@everyone.</code> <br/>

                    To help you manage permissions for command, Titanbot has the <code>EditCommand</code> command at your disposal for exactly this purpose! <br/>
                    
                    <code>EditCommand</code> has a few usages, but the usual ones are the <code>SetRole</code> or <code>SetPerm</code> sub-commands.
                    They are used to either whitelist roles or permissions to allow the usage of a command by anyone who has the role or required permissions.
                    If you for example have a role called <code>Members</code> and would like them to have access to the <code>TitanLord</code> command,
                    you would write <br/>
                    <code>t$EditCommand SetRole TitanLord Members</code> <br/>
                    This will open up the <code>TitanLord</code> command, along with all
                    of its usages. You can also decide you want anyone with a certain permission to be able to use the command, like anyone who can kick someone
                    from your guild. This would, hopefully, only be people you trust so they could help with the timer, instead of you having to define several
                    roles that are allowed to use the command. To find out what your permission number is, check out 
                    <a href="https://discordapi.com/permissions.html" target="_blank">Discord's Permission Calculator</a>. So back to the example of allowing
                    anyone with kicking capabilities on your guild to use the <code>TitanLord</code> command, you would write: <br/>
                    <code>t$EditCommand SetPerm TitanLord 2</code> because <code>2</code> is the permission number for kicking members. <br/>
                    Only remaining important thing is that you can also control who has access to the sub-commands. For example maybe you want
                    <code>TitanLord When</code> to be available to everyone, so you would simply write the command and sub-command with a
                    punctuation mark inbetween. <br/>
                    <code>t$EditCommand SetPerm TitanLord.When 0</code>, beacuse 0 is available to everyone. <br/>
                    To read more about the <code>EditCommand</code>, check it out in the commands list. <br/>
                </p>
                <h5 id="settings">Settings</h5>
                <p>
                    There are some settings you can tinker with in Titanbot as a guild administrator and they can be found with the <code>Settings</code> command.
                    To give a brief overview of how this works, you can type <code>t$Settings</code> to see the setting groups available within the bot.
                    Then to get a view into the settings of <code>Titanlord</code> settings group, you would type <code>t$Settings Titanlord</code> and you will get
                    a listing of the settings. To change one of them, all you have to do is take the Settings key and give it a new value. Much like how the previous
                    section works. So to change the ClanQuest level to 800, type <code>t$Settings Set ClanQuest 800</code>. <br />
                    To change the prepings setting, you can type <code>t$Settings Set PrePings 15m, 5m, 1m</code> to setup Titanbot to send out the <code>InXText</code>
                    15, 5, and 1 minutes respectively before the Titanlord timer has finished. There are some tags like <code>%USER%</code> or <code>%TIME%</code>,
                    that can be used in these texts that you can configure, but more info on this at the 
                    <a asp-controller="Setting" asp-action="Index">the settings page</a>, where you can also get a better view of all the settings available to you,
                    and potentially the ability to tweak them directly from this website at some point in the future.
                </p>
                <h5 id="message-handling">Message handling</h5>
                <p>
                    Titanbot has a few ways of interpreting any message you send to it. This section outlines some of the more important parts of this.
                    <ul>
                        <li>
                            Every message is translated to lower case, so <code>TITANLORD</code> is the same as <code>TitanLord</code> because
                            it will all be interpreted as <code>titanlord</code>.
                        </li>
                        <li>
                            Some commands allow for multiple values. These will be defined as <code>&lt;params...&gt;</code> in the command description
                            and are separated by commas. <code>t$EditCommand SetRole TitanLord Member, Moderator</code> will for example open the 
                            <code>TitanLord</code> command to anyone has the Member role or Moderator role.
                        </li>
                        <li>
                            If one of your roles consist of spaces, all you have to do is wrap it into quotes. This can also be combined with
                            the multiple values like <code>t$EditCommand SetRole TitanLord "Role With Space", "Another Role"</code>.
                        </li>
                    </ul>
                    Finally, there are two ways to convey a time to Titanbot. It can either be with the <code>hh:mm:ss</code> format, meaning if your next Titanlord
                    is up in 5 hours, 55 minutes, and 30 seconds, you can set it up like <code>t$TitanLord In 5:55:30</code>. If you type fewer colons, it will omit
                    from behind. So <code>5:55</code> will be 5 hours and 55 minutes. <br />
                    The second way is by giving it a number and a specifier as to if it is the hour, minute or second. The previous could also be 
                    <code>t$TitanLord In 5h 55m 30s</code>. The specifiers for
                    <code>hour</code> are <code>h, hr, hour, hours</code>, <code>minute</code> are <code>m, min, mins, minute, minutes</code> and finally
                    for <code>second</code> they are <code>s, sec, secs, second, seconds</code>. These can be given in any order. <br />
                    Finally if you give it a single number, it will be interpreted as the time in minutes.
                </p>
                <h4 id="commands">Commands</h4>
                <p>
                    Here you can find all of the commands in Titanbot!
                    Hopefully this will help you in using all of the commands available to you.
                    Do keep in mind that if you're a regular user in a guild, not every command will be available to you,
                    and that even if a command has a default permission that you meet, an administrator can restrict any command
                    they wish on their guild.
                    <br/>
                    
                    Do keep in mind that any sub-commands may not have the default permissions mentioned for the overall command.
                    There is however not an easy for to show this currently, but if you'd like to see it, let us know in our discord
                    guild :)
                    <br/>

                    Below is a quick cheat sheet in how the parameters of the bot are presented in the usage section of any command.
                    <br/>
                    <code>&lt;param&gt;</code> is required. <br/>
                    <code>[param]</code> is optional. <br/>
                    <code>&lt;params...&gt;</code> can be multi-valued. <br/>
                </p>
                @foreach (var group in Model.PriorityGroups)
                {
                    <h5 id="@group.ToString()">@group.ToString() commands</h5>
                    foreach (var command in Model.Commands.Where(v => v.Group == group).OrderBy(v => v.Name))
                    {
                        <h6 id="@command.Name"><b>@command.Name</b></h6>
                        <p>@command.Description</p>

                        if (command.Aliases.Any())
                        {
                            <p>
                                Aliases for this command:
                                
                                @* Fuck this aint pretty... Could use '@string.Join(", ", command.Aliases)' but that
                                   won't have the actual alias in a code block... Could try injecting a <code>*</code> tag somehow?
                                *@
                                @for (var i = 0; i < command.Aliases.Count; ++i)
                                {
                                    <code>@command.Aliases[i]</code>
                                    if (i < command.Aliases.Count - 1)
                                    {
                                        @(",")
                                    }
                                }
                            </p>
                        }

                        <p>
                            Default permission: @command.DefaultPerm.ToString()
                        </p>

                        if (command.Usages.Any())
                        {
                            <p>
                                Usages for this command: <br/>
                                @foreach (var u in command.Usages)
                                {
                                    if (u.Contains(" - "))
                                    {
                                        var usage = u.Split(new[] {" - "}, StringSplitOptions.RemoveEmptyEntries);
                                        <code>@usage[0]</code>
                                        @usage[1]
                                    }
                                    else
                                    {
                                        <span>@u</span>
                                    }
                                    <br/>
                                }
                            </p>
                        }

                        if (command.Flags.Any())
                        {
                            <p>
                                Flags: <br/>
                                @foreach (var f in command.Flags)
                                {
                                    <span>
                                        <code>
                                            @f.ShortInvokationString() (@f.InvokationString()) @f.GetArguments()
                                        </code> - @f.Description
                                    </span>
                                    <br/>
                                }
                            </p>
                        }
                        
                        if (string.IsNullOrEmpty(command.Notes) == false)
                        {
                            <p>@command.Notes</p>
                        }
                    }
                }
            </div>
        </div>
        
    </div>
    
</div>